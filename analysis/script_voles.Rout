
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> setwd('~/github/scr_ergon/analysis')
> 
> ##niter <- 3000
> niter <- 20000
> 
> saveFile <- 'results_reduced.RData'
> monitors <- c("kappa", "sigma", "lambda0", "beta", "dmean", "phi", "Phi")
> 
> 
> 
> ##load('volesData_reduced.RData')
> ##constants <- constants_reduced
> ##data <- data_reduced
> ##inits <- inits_reduced
> 
> 
> load('volesData.RData')
> 
> 
> 
> 
> 
> 
> message('starting NIMBLE')
starting NIMBLE
> 
> 
> 
> 
> if(Sys.info()['nodename'] == 'gandalf') library(nimble, lib.loc = '~/Documents/') else library(nimble)
nimble version 0.6-9 is loaded.
For more information on NIMBLE and a User Manual,
please visit http://R-nimble.org.

Attaching package: ‘nimble’

The following object is masked from ‘package:stats’:

    simulate

> 
> 
> 
> code <- nimbleCode({
+     for(sex in 1:2){
+         kappa[sex] ~ dunif(0,50)
+         sigma[sex] ~ dunif(0.1,20)
+     }
+     for(sex in 1:2){
+         for(TOD in 1:2){
+             lambda[TOD, sex] <- lambda0 * pow(beta[1],(TOD-1)) * pow(beta[2],(sex-1))
+         }
+     }
+     PL ~ dunif(0.01,0.99)
+     lambda0 <- -log(1-PL)
+     beta[1] ~ dunif(0.1,10)
+     beta[2] ~ dunif(0.1,10)
+     for(sex in 1:2){
+         Phi[sex] ~ dunif(0,1)
+         for(k in 1:(n.prim-1)){
+             phi[sex,k] <- pow(Phi[sex], dt[k])
+         }
+     }
+     for(sex in 1:2){
+         dmean[sex] ~ dunif(0,100)
+         dlambda[sex] <- 1/dmean[sex]
+     }
+     for(i in 1:N[1]){
+         z[i,first[i]] ~ dbern(1)
+         S[i,1,first[i]] ~ dunif(xlow[i], xupp[i]) # Prior for the first x coordinate
+         S[i,2,first[i]] ~ dunif(ylow[i], yupp[i]) # Prior for the first y coordinate
+         g[i,first[i],1] <- 0
+         for(r in 1:R){ # trap
+             D[i,r,first[i]] <- sqrt(pow(S[i,1,first[i]]-X[r,1],2) + pow(S[i,2,first[i]]-X[r,2],2))
+             g[i,first[i],r+1] <- exp(-pow(D[i,r,first[i]]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+         }
+         G[i,first[i]] <- sum(g[i,first[i],1:(R+1)]) # Total trap exposure
+         for(j in 1:J[i,first[i]]){
+             P[i,j,first[i]] <- 1 - exp(-lambda[tod[first[i],j],gr[i]]*G[i,first[i]]) # Probability of being captured
+             PPII[i,first[i],j] <- step(H[i,j,first[i]]-2)*(g[i,first[i],H[i,j,first[i]]]/(G[i,first[i]]+ 0.000000001))*P[i,j,first[i]] + (1-step(H[i,j,first[i]]-2))*(1-P[i,j,first[i]])
+             Ones[i,j,first[i]] ~ dbern(PPII[i,first[i],j])
+         }
+     }
+     for(i in (N[1]+1):N[2]){
+         z[i,first[i]] ~ dbern(1)
+         S[i,1,first[i]] ~ dunif(xlow[i], xupp[i]) # Prior for the first x coordinate
+         S[i,2,first[i]] ~ dunif(ylow[i], yupp[i]) # Prior for the first y coordinate
+         ## First primary session:
+         g[i,first[i],1] <- 0
+         for(r in 1:R){ # trap
+             D[i,r,first[i]] <- sqrt(pow(S[i,1,first[i]]-X[r,1],2) + pow(S[i,2,first[i]]-X[r,2],2))
+             g[i,first[i],r+1] <- exp(-pow(D[i,r,first[i]]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+         }
+         G[i,first[i]] <- sum(g[i,first[i],1:(R+1)]) # Total trap exposure
+         for(j in 1:J[i,first[i]]){
+             P[i,j,first[i]] <- 1 - exp(-lambda[tod[first[i],j],gr[i]]*G[i,first[i]]) # Probability of being captured
+             PPII[i,first[i],j] <- step(H[i,j,first[i]]-2)*(g[i,first[i],H[i,j,first[i]]]/(G[i,first[i]]+ 0.000000001))*P[i,j,first[i]] + (1-step(H[i,j,first[i]]-2))*(1-P[i,j,first[i]])
+             Ones[i,j,first[i]] ~ dbern(PPII[i,first[i],j])
+         }
+         for(k in (first[i]+1):K[i]){ # primary session
+             theta[i,k-1] ~ dunif(-3.141593,3.141593) # Prior for dispersal direction 
+             z[i,k] ~ dbern(Palive[i,k-1])
+             Palive[i,k-1] <- z[i,k-1]*phi[gr[i],k-1] # Pr(alive in primary session k) gr[i] = sex
+             d[i,k-1] ~ dexp(dlambda[gr[i]])
+             S[i,1,k] <- S[i,1,k-1] + d[i,k-1]*cos(theta[i,k-1])
+             S[i,2,k] <- S[i,2,k-1] + d[i,k-1]*sin(theta[i,k-1])
+             g[i,k,1] <- 0
+             for(r in 1:R){ # trap
+                 D[i,r,k] <- sqrt(pow(S[i,1,k]-X[r,1],2) + pow(S[i,2,k]-X[r,2],2))  # Squared distance to trap
+                 g[i,k,r+1] <- exp(-pow(D[i,r,k]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+             }
+             G[i,k] <- sum(g[i,k,1:(R+1)]) # Total trap exposure
+             for(j in 1:J[i,k]){
+                 P[i,j,k] <- (1 - exp(-lambda[tod[k,j],gr[i]]*G[i,k]))*z[i,k] # Probability of being captured
+                 PPII[i,k,j] <- step(H[i,j,k]-2)*(g[i,k,H[i,j,k]]/(G[i,k] + 0.000000001))*P[i,j,k] + (1-step(H[i,j,k]-2))*(1-P[i,j,k])
+                 Ones[i,j,k] ~ dbern(PPII[i,k,j])
+             }
+         }
+     }
+ })
> 
> 
> 
> 
> 
> modelInfo <- list(code = code, constants = constants, data=data, inits = inits, name = 'jags')
> out_jags <- compareMCMCs(modelInfo=modelInfo, MCMCs = 'jags', monitors=monitors, niter=niter)
Working on jags 
defining model...
building model...
setting data and initial values...
running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... 
checking model sizes and dimensions... This model is not fully initialized. This is not an error. To see which variables are not initialized, use model$initializeInfo(). For more information on model initialization, see help(modelInitialization).
model building finished.
Compiling model graph
   Resolving undeclared variables
   Allocating nodes
Graph information:
   Observed stochastic nodes: 2297
   Unobserved stochastic nodes: 1595
   Total graph size: 1608998

Initializing model

