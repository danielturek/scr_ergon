
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> setwd('~/github/scr_ergon/analysis')
> 
> ##niter <- 3000
> ##niter <- 10000
> niter <- 20000
> 
> useFullDataset <- TRUE
> ##useFullDataset <- FALSE
> 
> saveFile <- 'results_scr3.RData'
> 
> 
> 
> monitors <- c("kappa", "sigma", "lambda0", "beta", "dmean", "phi", "Phi")
> 
> if(useFullDataset) {
+     load('volesData.RData')
+ } else {
+     load('volesData_reduced.RData')
+     constants <- constants_reduced
+     data <- data_reduced
+     inits <- inits_reduced
+ }
> 
> 
> outList <- list()
> 
> 
> if(Sys.info()['nodename'] == 'gandalf') library(nimble, lib.loc = '~/Documents/') else library(nimble)
nimble version 0.6-9 is loaded.
For more information on NIMBLE and a User Manual,
please visit http://R-nimble.org.

Attaching package: ‘nimble’

The following object is masked from ‘package:stats’:

    simulate

> 
> 
> 
> code <- nimbleCode({
+     for(sex in 1:2){
+         kappa[sex] ~ dunif(0,50)
+         sigma[sex] ~ dunif(0.1,20)
+     }
+     for(sex in 1:2){
+         for(TOD in 1:2){
+             lambda[TOD, sex] <- lambda0 * pow(beta[1],(TOD-1)) * pow(beta[2],(sex-1))
+         }
+     }
+     PL ~ dunif(0.01,0.99)
+     lambda0 <- -log(1-PL)
+     beta[1] ~ dunif(0.1,10)
+     beta[2] ~ dunif(0.1,10)
+     for(sex in 1:2){
+         Phi[sex] ~ dunif(0,1)
+         for(k in 1:(n.prim-1)){
+             phi[sex,k] <- pow(Phi[sex], dt[k])
+         }
+     }
+     for(sex in 1:2){
+         dmean[sex] ~ dunif(0,100)
+         dlambda[sex] <- 1/dmean[sex]
+     }
+     for(i in 1:N[1]){
+         z[i,first[i]] ~ dbern(1)
+         S[i,1,first[i]] ~ dunif(xlow[i], xupp[i]) # Prior for the first x coordinate
+         S[i,2,first[i]] ~ dunif(ylow[i], yupp[i]) # Prior for the first y coordinate
+         g[i,first[i],1] <- 0
+         for(r in 1:R){ # trap
+             D[i,r,first[i]] <- sqrt(pow(S[i,1,first[i]]-X[r,1],2) + pow(S[i,2,first[i]]-X[r,2],2))
+             g[i,first[i],r+1] <- exp(-pow(D[i,r,first[i]]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+         }
+         G[i,first[i]] <- sum(g[i,first[i],1:(R+1)]) # Total trap exposure
+         for(j in 1:J[i,first[i]]){
+             P[i,j,first[i]] <- 1 - exp(-lambda[tod[first[i],j],gr[i]]*G[i,first[i]]) # Probability of being captured
+             PPII[i,first[i],j] <- step(H[i,j,first[i]]-2)*(g[i,first[i],H[i,j,first[i]]]/(G[i,first[i]]+ 0.000000001))*P[i,j,first[i]] + (1-step(H[i,j,first[i]]-2))*(1-P[i,j,first[i]])
+             Ones[i,j,first[i]] ~ dbern(PPII[i,first[i],j])
+         }
+     }
+     for(i in (N[1]+1):N[2]){
+         z[i,first[i]] ~ dbern(1)
+         S[i,1,first[i]] ~ dunif(xlow[i], xupp[i]) # Prior for the first x coordinate
+         S[i,2,first[i]] ~ dunif(ylow[i], yupp[i]) # Prior for the first y coordinate
+         ## First primary session:
+         g[i,first[i],1] <- 0
+         for(r in 1:R){ # trap
+             D[i,r,first[i]] <- sqrt(pow(S[i,1,first[i]]-X[r,1],2) + pow(S[i,2,first[i]]-X[r,2],2))
+             g[i,first[i],r+1] <- exp(-pow(D[i,r,first[i]]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+         }
+         G[i,first[i]] <- sum(g[i,first[i],1:(R+1)]) # Total trap exposure
+         for(j in 1:J[i,first[i]]){
+             P[i,j,first[i]] <- 1 - exp(-lambda[tod[first[i],j],gr[i]]*G[i,first[i]]) # Probability of being captured
+             PPII[i,first[i],j] <- step(H[i,j,first[i]]-2)*(g[i,first[i],H[i,j,first[i]]]/(G[i,first[i]]+ 0.000000001))*P[i,j,first[i]] + (1-step(H[i,j,first[i]]-2))*(1-P[i,j,first[i]])
+             Ones[i,j,first[i]] ~ dbern(PPII[i,first[i],j])
+         }
+         for(k in (first[i]+1):K[i]){ # primary session
+             theta[i,k-1] ~ dunif(-3.141593,3.141593) # Prior for dispersal direction 
+             z[i,k] ~ dbern(Palive[i,k-1])
+             Palive[i,k-1] <- z[i,k-1]*phi[gr[i],k-1] # Pr(alive in primary session k) gr[i] = sex
+             d[i,k-1] ~ dexp(dlambda[gr[i]])
+             S[i,1,k] <- S[i,1,k-1] + d[i,k-1]*cos(theta[i,k-1])
+             S[i,2,k] <- S[i,2,k-1] + d[i,k-1]*sin(theta[i,k-1])
+             g[i,k,1] <- 0
+             for(r in 1:R){ # trap
+                 D[i,r,k] <- sqrt(pow(S[i,1,k]-X[r,1],2) + pow(S[i,2,k]-X[r,2],2))  # Squared distance to trap
+                 g[i,k,r+1] <- exp(-pow(D[i,r,k]/sigma[gr[i]], kappa[gr[i]])) # Trap exposure
+             }
+             G[i,k] <- sum(g[i,k,1:(R+1)]) # Total trap exposure
+             for(j in 1:J[i,k]){
+                 P[i,j,k] <- (1 - exp(-lambda[tod[k,j],gr[i]]*G[i,k]))*z[i,k] # Probability of being captured
+                 PPII[i,k,j] <- step(H[i,j,k]-2)*(g[i,k,H[i,j,k]]/(G[i,k] + 0.000000001))*P[i,j,k] + (1-step(H[i,j,k]-2))*(1-P[i,j,k])
+                 Ones[i,j,k] ~ dbern(PPII[i,k,j])
+             }
+         }
+     }
+ })
> 
> 
> 
> 
> 
> ##modelInfo <- list(code = code, constants = constants, data=data, inits = inits, name = 'jags')
> ##out_jags <- compareMCMCs(modelInfo=modelInfo, MCMCs = 'jags', monitors=monitors, niter=niter)[[1]]
> ##outList$jags <- out_jags
> ##save(outList, file = saveFile)
> ##message('finished JAGS')
> 
> 
> ##modelInfo <- list(code = code, constants = constants, data=data, inits = inits, name = 'nimble')
> ##out_nimble <- compareMCMCs(modelInfo=modelInfo, monitors=monitors, niter=niter)[[1]]
> ##outList$nimble <- out_nimble
> ##save(outList, file = saveFile)
> ##message('finished NIMBLE')
> 
> 
> 
> 
> code_dSCR1 <- nimbleCode({
+     ## space use and recapture probability parameters
+     PL ~ dunif(0.01, 0.99)
+     lambda0 <- -log(1-PL)
+     for(sex in 1:2) {
+         kappa[sex] ~ dunif(0,   50)
+         sigma[sex] ~ dunif(0.1, 20)
+         beta[sex]  ~ dunif(0.1, 10)    # misnomer: beta[1] is coeff of tod, beta[2] is coeff of sex
+         for(TOD in 1:2) {
+             lambda[TOD, sex] <- lambda0 * beta[1]^(TOD-1) * beta[2]^(sex-1)
+         }
+         ## survival parameters
+         Phi[sex] ~ dunif(0, 1)
+         for(k in 1:(nPrimary-1)) {
+             phi[sex, k] <- Phi[sex]^dt[k]
+         }
+         ## dispersal parameters
+         dmean[sex] ~ dunif(0, 100)
+         dlambda[sex] <- 1/dmean[sex]
+     }
+     for(i in 1:nInd) {
+         S[i, 1, first[i]] ~ dunif(xlow[i], xupp[i])  # initial center of activity (x)
+         S[i, 2, first[i]] ~ dunif(ylow[i], yupp[i])  # initial center of activity (y)
+         z[i, first[i]] <- 1
+         for(k in first[i]:last[i]) {
+             D[i, k, 1:R] <- sqrt((S[i, 1, k] - X[1:R, 1])^2 + (S[i, 2, k] - X[1:R, 2])^2)
+             g[i, k, 1:R] <- exp(-(D[i, k, 1:R]/sigma[gr[i]])^kappa[gr[i]])  # trap exposure
+             G[i, k] <- sum(g[i, k, 1:R])                                    # total trap exposure
+         }
+         for(k in first[i]:(last[i]-1)) {
+             theta[i, k] ~ dunif(-3.141593, 3.141593)   # dispersal direction
+             d[i, k] ~ dexp(dlambda[gr[i]])
+             S[i, 1, k+1] <- S[i, 1, k] + d[i, k] * cos(theta[i, k])
+             S[i, 2, k+1] <- S[i, 2, k] + d[i, k] * sin(theta[i, k])
+             Palive[i, k] <- z[i, k] * phi[gr[i], k]
+             z[i, k+1] ~ dbern(Palive[i, k])
+         }
+         ## likelihood
+         H[i, 1:nSecondary, 1:nPrimary] ~ dSCR1(
+             first = first[i], last = last[i], J = J[i,1:nPrimary],
+             lambda = lambda[1:2,gr[i]], tod = tod[1:nPrimary,1:nSecondary],
+             g = g[i,1:nPrimary,1:R], G = G[i,1:nPrimary], z = z[i,1:nPrimary])
+     }
+ })
> 
> ## define custom distribution
> dSCR1 <- nimbleFunction(
+     run = function(x = double(2),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1),
+         log = double()) {
+         lp <- 0
+         for(k in first:last) {    # primary session
+             for(j in 1:J[k]) {    # secondary session
+                 logPnoCapture <- -lambda[tod[k,j]] * G[k] * z[k]
+                 if(x[j,k] == 1) {    # not captured
+                     lp <- lp + logPnoCapture
+                 } else {             # captured
+                     lp <- lp + log(1-exp(logPnoCapture)) + log(g[k, x[j,k]-1]) - log(G[k])
+                 }
+             }
+         }
+         returnType(double())
+         if(log) return(lp) else return(exp(lp))
+     }
+ )
> 
> rSCR1 <- nimbleFunction(
+     run = function(n = integer(),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1)) {
+         x <- array(1, c(dim(tod)[2], dim(tod)[1]))
+         returnType(double(2))
+         return(x)
+     }
+ )
> 
> registerDistributions(list(
+     dSCR1 = list(
+         BUGSdist = 'dSCR1(first, last, J, lambda, tod, g, G, z)',
+         types = c('value = double(2)', 'first = double()', 'last = double()', 'J = double(1)', 'lambda = double(1)', 'tod = double(2)', 'g = double(2)', 'G = double(1)', 'z = double(1)'),
+         discrete = TRUE,
+         mixedSizes = TRUE
+     )
+ ))
Registering the following user-provided distributions: dSCR1 .
> 
> 
> constants_dSCR1 <- constants[c('R', 'J', 'tod', 'first', 'X',
+                                        'dt', 'gr', 'xlow', 'xupp', 'ylow', 'yupp')]
> constants_dSCR1$last       <- constants$K
> constants_dSCR1$nInd       <- dim(constants$H)[1]
> constants_dSCR1$nPrimary   <- dim(constants$H)[3]
> constants_dSCR1$nSecondary <- dim(constants$H)[2]
> data_dSCR1 <- list(H=constants$H)
> inits_dSCR1 <- inits
> 
> 
> 
> 
> modelInfo_dSCR1 <- list(code = code_dSCR1, constants = constants_dSCR1, data=data_dSCR1, inits = inits_dSCR1, name = 'SCR1')
> out_dSCR1 <- compareMCMCs(modelInfo=modelInfo_dSCR1, monitors=monitors, niter=niter)[[1]]
Working on SCR1 
defining model...
Adding J,tod,X as data for building model.
building model...
setting data and initial values...
running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... 
checking model sizes and dimensions... This model is not fully initialized. This is not an error. To see which variables are not initialized, use model$initializeInfo(). For more information on model initialization, see help(modelInitialization).
model building finished.
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
warning: value of right hand side only node not initialized
|-------------|-------------|-------------|-------------|
|-------------------------------------------------------|
> out_dSCR1 <- rename_MCMC_comparison_method('nimble', 'SCR1', out_dSCR1)
> outList$SCR1 <- out_dSCR1
> save(outList, file = saveFile)
> message('finished SCR1')
finished SCR1
> 
> 
> 
> 
> 
> 
> code_dSCR2 <- nimbleCode({
+     ## space use and recapture probability parameters
+     PL ~ dunif(0.01, 0.99)
+     lambda0 <- -log(1-PL)
+     for(sex in 1:2) {
+         kappa[sex] ~ dunif(0,   50)
+         sigma[sex] ~ dunif(0.1, 20)
+         beta[sex]  ~ dunif(0.1, 10)    # misnomer: beta[1] is coeff of tod, beta[2] is coeff of sex
+         for(TOD in 1:2) {
+             lambda[TOD, sex] <- lambda0 * beta[1]^(TOD-1) * beta[2]^(sex-1)
+         }
+         ## survival parameters
+         Phi[sex] ~ dunif(0, 1)
+         for(k in 1:(nPrimary-1)) {
+             phi[sex, k] <- Phi[sex]^dt[k]
+         }
+         ## dispersal parameters
+         dmean[sex] ~ dunif(0, 100)
+         dlambda[sex] <- 1/dmean[sex]
+     }
+     for(i in 1:nInd) {
+         S[i, 1, first[i]] ~ dunif(xlow[i], xupp[i])  # initial center of activity (x)
+         S[i, 2, first[i]] ~ dunif(ylow[i], yupp[i])  # initial center of activity (y)
+         for(k in first[i]:last[i]) {
+             D[i, k, 1:R] <- sqrt((S[i, 1, k] - X[1:R, 1])^2 + (S[i, 2, k] - X[1:R, 2])^2)
+             g[i, k, 1:R] <- exp(-(D[i, k, 1:R]/sigma[gr[i]])^kappa[gr[i]])  # trap exposure
+             G[i, k] <- sum(g[i, k, 1:R])                                    # total trap exposure
+         }
+         for(k in first[i]:(last[i]-1)) {
+             theta[i, k] ~ dunif(-3.141593, 3.141593)   # dispersal direction
+             d[i, k] ~ dexp(dlambda[gr[i]])
+             S[i, 1, k+1] <- S[i, 1, k] + d[i, k] * cos(theta[i, k])
+             S[i, 2, k+1] <- S[i, 2, k] + d[i, k] * sin(theta[i, k])
+         }
+         ## likelihood
+         H[i, 1:nSecondary, 1:nPrimary] ~ dSCR2(
+             first = first[i], last = last[i], J = J[i,1:nPrimary],
+             lambda = lambda[1:2,gr[i]], tod = tod[1:nPrimary,1:nSecondary],
+             g = g[i,1:nPrimary,1:R], G = G[i,1:nPrimary],
+             z = z[i,1:nPrimary], phi = phi[gr[i],1:(nPrimary-1)])
+     }
+ })
> 
> ## define custom distribution
> dSCR2 <- nimbleFunction(
+     run = function(x = double(2),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1), phi = double(1),
+         log = double()) {
+         pAlive <- 1
+         pDead <- 0
+         lp <- 0
+         ## probability of surviving from k to (k+1): phi[k]
+         for(k in first:last) {
+             if(z[k] == 1) {    # known to be alive
+                 if(k > first)           # survived
+                     lp <- lp + log(phi[k-1])
+                 for(j in 1:J[k]) {
+                     pNoCaptureGivenAlive <- exp(-lambda[tod[k,j]] * G[k])
+                     if(x[j,k] == 1) {   # not captured
+                         lp <- lp + log(pNoCaptureGivenAlive)
+                     } else {            # captured
+                         lp <- lp + log(1-pNoCaptureGivenAlive) + log(g[k, x[j,k]-1]) - log(G[k])
+                     }
+                 }
+             } else {           # could be dead or alive
+                 pTheseNonSightings <- 1
+                 for(j in 1:J[k]) {
+                     pNoCaptureGivenAlive <- exp(-lambda[tod[k,j]] * G[k])
+                     pTheseNonSightings <- pTheseNonSightings * pNoCaptureGivenAlive
+                 }
+                 pAlive_new <- phi[k-1] * pAlive
+                 pDead_new <- (1-phi[k-1]) * pAlive + pDead
+                 L <- pAlive_new * pTheseNonSightings + pDead_new
+                 pAlive <- (pAlive_new * pTheseNonSightings) / L
+                 pDead <- pDead_new / L
+                 lp <- lp + log(L)
+             }
+         }
+         returnType(double())
+         if(log) return(lp) else return(exp(lp))
+     }
+ )
> 
> rSCR2 <- nimbleFunction(
+     run = function(n = integer(),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1), phi = double(1)) {
+         x <- array(1, c(dim(tod)[2], dim(tod)[1]))
+         returnType(double(2))
+         return(x)
+     }
+ )
> 
> registerDistributions(list(
+     dSCR2 = list(
+         BUGSdist = 'dSCR2(first, last, J, lambda, tod, g, G, z, phi)',
+         types = c('value = double(2)', 'first = double()', 'last = double()', 'J = double(1)', 'lambda = double(1)', 'tod = double(2)', 'g = double(2)', 'G = double(1)', 'z = double(1)', 'phi = double(1)'),
+         discrete = TRUE,
+         mixedSizes = TRUE
+     )
+ ))
Registering the following user-provided distributions: dSCR2 .
> 
> 
> constants_dSCR2 <- constants[c('R', 'J', 'tod', 'first', 'X',
+                                'dt', 'gr', 'xlow', 'xupp', 'ylow', 'yupp')]
> constants_dSCR2$z          <- inits$z
> constants_dSCR2$last       <- constants$K
> constants_dSCR2$nInd       <- dim(constants$H)[1]
> constants_dSCR2$nPrimary   <- dim(constants$H)[3]
> constants_dSCR2$nSecondary <- dim(constants$H)[2]
> data_dSCR2 <- list(H=constants$H)
> zInd <- which(names(inits) == 'z')
> inits_dSCR2 <- inits[-zInd]
> 
> 
> 
> 
> 
> 
> modelInfo_dSCR2 <- list(code = code_dSCR2, constants = constants_dSCR2, data=data_dSCR2, inits = inits_dSCR2, name = 'SCR2')
> out_dSCR2 <- compareMCMCs(modelInfo=modelInfo_dSCR2, monitors=monitors, niter=niter)[[1]]
Working on SCR2 
defining model...
Adding J,tod,X,z as data for building model.
building model...
setting data and initial values...
running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... 
checking model sizes and dimensions... This model is not fully initialized. This is not an error. To see which variables are not initialized, use model$initializeInfo(). For more information on model initialization, see help(modelInitialization).
model building finished.
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
warning: value of right hand side only node not initialized
|-------------|-------------|-------------|-------------|
|-------------------------------------------------------|
> out_dSCR2 <- rename_MCMC_comparison_method('nimble', 'SCR2', out_dSCR2)
> outList$SCR2 <- out_dSCR2
> save(outList, file = saveFile)
> message('finished SCR2')
finished SCR2
> 
> 
> 
> 
> code_dSCR3 <- nimbleCode({
+     ## space use and recapture probability parameters
+     PL ~ dunif(0.01, 0.99)
+     lambda0 <- -log(1-PL)
+     for(sex in 1:2) {
+         kappa[sex] ~ dunif(0,   50)
+         sigma[sex] ~ dunif(0.1, 20)
+         beta[sex]  ~ dunif(0.1, 10)    # misnomer: beta[1] is coeff of tod, beta[2] is coeff of sex
+         for(TOD in 1:2) {
+             lambda[TOD, sex] <- lambda0 * beta[1]^(TOD-1) * beta[2]^(sex-1)
+         }
+         ## survival parameters
+         Phi[sex] ~ dunif(0, 1)
+         for(k in 1:(nPrimary-1)) {
+             phi[sex, k] <- Phi[sex]^dt[k]
+         }
+         ## dispersal parameters
+         dmean[sex] ~ dunif(0, 100)
+         dlambda[sex] <- 1/dmean[sex]
+     }
+     for(i in 1:nInd) {
+         S[i, 1, first[i]] ~ dunif(xlow[i], xupp[i])  # initial center of activity (x)
+         S[i, 2, first[i]] ~ dunif(ylow[i], yupp[i])  # initial center of activity (y)
+         for(k in first[i]:last[i]) {
+             D[i, k, 1:R] <- sqrt((S[i, 1, k] - X[1:R, 1])^2 + (S[i, 2, k] - X[1:R, 2])^2)
+             g[i, k, 1:R] <- exp(-(D[i, k, 1:R]/sigma[gr[i]])^kappa[gr[i]])  # trap exposure
+             G[i, k] <- sum(g[i, k, 1:R])                                    # total trap exposure
+         }
+         for(k in first[i]:(last[i]-1)) {
+ ##############theta[i, k] ~ dunif(-3.141593, 3.141593)   # dispersal direction
+ ##############d[i, k] ~ dexp(dlambda[gr[i]])
+ ##############S[i, 1, k+1] <- S[i, 1, k] + d[i, k] * cos(theta[i, k])
+ ##############S[i, 2, k+1] <- S[i, 2, k] + d[i, k] * sin(theta[i, k])
+             S[i, 1:2, k+1] ~ dS3(S = S[i, 1:2, k], lambda = dlambda[gr[i]])
+         }
+         ## likelihood
+         H[i, 1:nSecondary, 1:nPrimary] ~ dSCR3(
+             first = first[i], last = last[i], J = J[i,1:nPrimary],
+             lambda = lambda[1:2,gr[i]], tod = tod[1:nPrimary,1:nSecondary],
+             g = g[i,1:nPrimary,1:R], G = G[i,1:nPrimary],
+             z = z[i,1:nPrimary], phi = phi[gr[i],1:(nPrimary-1)])
+     }
+ })
> 
> dS3 <- nimbleFunction(
+     run = function(x = double(1), S = double(1), lambda = double(), log = double()) {
+         D <- sqrt((x[1]-S[1])^2 + (x[2]-S[2])^2)
+         lp <- dexp(D, lambda, log = TRUE)
+         returnType(double())
+         return(lp)
+     }
+ )
> 
> rS3 <- nimbleFunction(
+     run = function(n = integer(), S = double(1), lambda = double()) {
+         x <- c(1,1)
+         returnType(double(1))
+         return(x)
+     }
+ )
> 
> registerDistributions(list(
+     dS3 = list(
+         BUGSdist = 'dS3(S, lambda)',
+         types = c('value = double(1)', 'S = double(1)', 'lambda = double()'),
+         mixedSizes = TRUE
+     )
+ ))
Registering the following user-provided distributions: dS3 .
> 
> ## define custom distribution
> dSCR3 <- nimbleFunction(
+     run = function(x = double(2),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1), phi = double(1),
+         log = double()) {
+         pAlive <- 1
+         pDead <- 0
+         lp <- 0
+         ## probability of surviving from k to (k+1): phi[k]
+         for(k in first:last) {
+             if(z[k] == 1) {    # known to be alive
+                 if(k > first)           # survived
+                     lp <- lp + log(phi[k-1])
+                 for(j in 1:J[k]) {
+                     pNoCaptureGivenAlive <- exp(-lambda[tod[k,j]] * G[k])
+                     if(x[j,k] == 1) {   # not captured
+                         lp <- lp + log(pNoCaptureGivenAlive)
+                     } else {            # captured
+                         lp <- lp + log(1-pNoCaptureGivenAlive) + log(g[k, x[j,k]-1]) - log(G[k])
+                     }
+                 }
+             } else {           # could be dead or alive
+                 pTheseNonSightings <- 1
+                 for(j in 1:J[k]) {
+                     pNoCaptureGivenAlive <- exp(-lambda[tod[k,j]] * G[k])
+                     pTheseNonSightings <- pTheseNonSightings * pNoCaptureGivenAlive
+                 }
+                 pAlive_new <- phi[k-1] * pAlive
+                 pDead_new <- (1-phi[k-1]) * pAlive + pDead
+                 L <- pAlive_new * pTheseNonSightings + pDead_new
+                 pAlive <- (pAlive_new * pTheseNonSightings) / L
+                 pDead <- pDead_new / L
+                 lp <- lp + log(L)
+             }
+         }
+         returnType(double())
+         if(log) return(lp) else return(exp(lp))
+     }
+ )
> 
> rSCR3 <- nimbleFunction(
+     run = function(n = integer(),
+         first = double(), last = double(), J = double(1),
+         lambda = double(1), tod = double(2),
+         g = double(2), G = double(1), z = double(1), phi = double(1)) {
+         x <- array(1, c(dim(tod)[2], dim(tod)[1]))
+         returnType(double(2))
+         return(x)
+     }
+ )
> 
> registerDistributions(list(
+     dSCR3 = list(
+         BUGSdist = 'dSCR3(first, last, J, lambda, tod, g, G, z, phi)',
+         types = c('value = double(2)', 'first = double()', 'last = double()', 'J = double(1)', 'lambda = double(1)', 'tod = double(2)', 'g = double(2)', 'G = double(1)', 'z = double(1)', 'phi = double(1)'),
+         discrete = TRUE,
+         mixedSizes = TRUE
+     )
+ ))
Registering the following user-provided distributions: dSCR3 .
> 
> 
> constants_dSCR3 <- constants[c('R', 'J', 'tod', 'first', 'X',
+                                'dt', 'gr', 'xlow', 'xupp', 'ylow', 'yupp')]
> constants_dSCR3$z          <- inits$z
> constants_dSCR3$last       <- constants$K
> constants_dSCR3$nInd       <- dim(constants$H)[1]
> constants_dSCR3$nPrimary   <- dim(constants$H)[3]
> constants_dSCR3$nSecondary <- dim(constants$H)[2]
> data_dSCR3 <- list(H=constants$H)
> zInd <- which(names(inits) == 'z')
> thetaInd <- which(names(inits) == 'theta')
> dInd <- which(names(inits) == 'd')
> inits_dSCR3 <- inits[c(-zInd, -thetaInd, -dInd)]
> Sinit <- inits_dSCR3$S
> for(i in 1:constants_dSCR3$nInd) {
+     if(constants_dSCR3$last[i] > constants_dSCR3$first[i]) {
+         for(k in (constants_dSCR3$first[i]+1):constants_dSCR3$last[i]) {
+             Sinit[i,1:2,k] <- Sinit[i,1:2,constants_dSCR3$first[i]]
+         }
+     }
+ }
> inits_dSCR3$S <- Sinit
> 
> 
> 
> modelInfo_dSCR3 <- list(code = code_dSCR3, constants = constants_dSCR3, data=data_dSCR3, inits = inits_dSCR3, name = 'SCR3')
> out_dSCR3 <- compareMCMCs(modelInfo=modelInfo_dSCR3, monitors=monitors, niter=niter, MCMCs = 'nimbleScalar', MCMCdefs = list(nimbleScalar = quote({conf <- configureMCMC(Rmodel, multivariateNodesAsScalars = TRUE); conf$printSamplers(); conf})))[[1]]
Working on SCR3 
defining model...
Adding J,tod,X,z as data for building model.
building model...
setting data and initial values...
running calculate on model (any error reports that follow may simply reflect missing values in model variables) ... 
checking model sizes and dimensions... This model is not fully initialized. This is not an error. To see which variables are not initialized, use model$initializeInfo(). For more information on model initialization, see help(modelInitialization).
model building finished.
[1]    RW sampler: PL
[2]    RW sampler: kappa[1]
[3]    RW sampler: kappa[2]
[4]    RW sampler: sigma[1]
[5]    RW sampler: sigma[2]
[6]    RW sampler: beta[1]
[7]    RW sampler: beta[2]
[8]    RW sampler: Phi[1]
[9]    RW sampler: Phi[2]
[10]   RW sampler: dmean[1]
[11]   RW sampler: dmean[2]
[12]   RW sampler: S[1, 1, 1]
[13]   RW sampler: S[2, 1, 1]
[14]   RW sampler: S[3, 1, 1]
[15]   RW sampler: S[4, 1, 4]
[16]   RW sampler: S[5, 1, 4]
[17]   RW sampler: S[6, 1, 4]
[18]   RW sampler: S[7, 1, 4]
[19]   RW sampler: S[8, 1, 4]
[20]   RW sampler: S[9, 1, 1]
[21]   RW sampler: S[10, 1, 3]
[22]   RW sampler: S[11, 1, 3]
[23]   RW sampler: S[12, 1, 3]
[24]   RW sampler: S[13, 1, 3]
[25]   RW sampler: S[14, 1, 3]
[26]   RW sampler: S[15, 1, 3]
[27]   RW sampler: S[16, 1, 3]
[28]   RW sampler: S[17, 1, 3]
[29]   RW sampler: S[18, 1, 3]
[30]   RW sampler: S[19, 1, 3]
[31]   RW sampler: S[20, 1, 3]
[32]   RW sampler: S[21, 1, 3]
[33]   RW sampler: S[22, 1, 3]
[34]   RW sampler: S[23, 1, 3]
[35]   RW sampler: S[24, 1, 3]
[36]   RW sampler: S[25, 1, 3]
[37]   RW sampler: S[26, 1, 3]
[38]   RW sampler: S[27, 1, 3]
[39]   RW sampler: S[28, 1, 3]
[40]   RW sampler: S[29, 1, 2]
[41]   RW sampler: S[30, 1, 2]
[42]   RW sampler: S[31, 1, 2]
[43]   RW sampler: S[32, 1, 2]
[44]   RW sampler: S[33, 1, 2]
[45]   RW sampler: S[34, 1, 2]
[46]   RW sampler: S[35, 1, 2]
[47]   RW sampler: S[36, 1, 2]
[48]   RW sampler: S[37, 1, 2]
[49]   RW sampler: S[38, 1, 2]
[50]   RW sampler: S[39, 1, 2]
[51]   RW sampler: S[40, 1, 2]
[52]   RW sampler: S[41, 1, 2]
[53]   RW sampler: S[42, 1, 2]
[54]   RW sampler: S[43, 1, 2]
[55]   RW sampler: S[44, 1, 2]
[56]   RW sampler: S[45, 1, 2]
[57]   RW sampler: S[46, 1, 2]
[58]   RW sampler: S[47, 1, 2]
[59]   RW sampler: S[48, 1, 2]
[60]   RW sampler: S[49, 1, 2]
[61]   RW sampler: S[50, 1, 2]
[62]   RW sampler: S[51, 1, 2]
[63]   RW sampler: S[52, 1, 2]
[64]   RW sampler: S[53, 1, 2]
[65]   RW sampler: S[54, 1, 2]
[66]   RW sampler: S[55, 1, 2]
[67]   RW sampler: S[56, 1, 2]
[68]   RW sampler: S[57, 1, 2]
[69]   RW sampler: S[58, 1, 2]
[70]   RW sampler: S[59, 1, 2]
[71]   RW sampler: S[60, 1, 2]
[72]   RW sampler: S[61, 1, 2]
[73]   RW sampler: S[62, 1, 2]
[74]   RW sampler: S[63, 1, 2]
[75]   RW sampler: S[64, 1, 2]
[76]   RW sampler: S[65, 1, 2]
[77]   RW sampler: S[66, 1, 2]
[78]   RW sampler: S[67, 1, 2]
[79]   RW sampler: S[68, 1, 2]
[80]   RW sampler: S[69, 1, 1]
[81]   RW sampler: S[70, 1, 1]
[82]   RW sampler: S[71, 1, 1]
[83]   RW sampler: S[72, 1, 1]
[84]   RW sampler: S[73, 1, 1]
[85]   RW sampler: S[74, 1, 1]
[86]   RW sampler: S[75, 1, 1]
[87]   RW sampler: S[76, 1, 1]
[88]   RW sampler: S[77, 1, 1]
[89]   RW sampler: S[78, 1, 1]
[90]   RW sampler: S[79, 1, 1]
[91]   RW sampler: S[80, 1, 1]
[92]   RW sampler: S[81, 1, 1]
[93]   RW sampler: S[82, 1, 1]
[94]   RW sampler: S[83, 1, 1]
[95]   RW sampler: S[84, 1, 1]
[96]   RW sampler: S[85, 1, 1]
[97]   RW sampler: S[86, 1, 1]
[98]   RW sampler: S[87, 1, 1]
[99]   RW sampler: S[88, 1, 1]
[100]  RW sampler: S[89, 1, 1]
[101]  RW sampler: S[90, 1, 1]
[102]  RW sampler: S[91, 1, 1]
[103]  RW sampler: S[92, 1, 1]
[104]  RW sampler: S[93, 1, 1]
[105]  RW sampler: S[94, 1, 1]
[106]  RW sampler: S[95, 1, 1]
[107]  RW sampler: S[96, 1, 1]
[108]  RW sampler: S[97, 1, 1]
[109]  RW sampler: S[98, 1, 1]
[110]  RW sampler: S[99, 1, 1]
[111]  RW sampler: S[100, 1, 1]
[112]  RW sampler: S[101, 1, 1]
[113]  RW sampler: S[102, 1, 1]
[114]  RW sampler: S[103, 1, 1]
[115]  RW sampler: S[104, 1, 1]
[116]  RW sampler: S[105, 1, 1]
[117]  RW sampler: S[106, 1, 1]
[118]  RW sampler: S[107, 1, 1]
[119]  RW sampler: S[108, 1, 1]
[120]  RW sampler: S[109, 1, 1]
[121]  RW sampler: S[110, 1, 1]
[122]  RW sampler: S[111, 1, 1]
[123]  RW sampler: S[112, 1, 1]
[124]  RW sampler: S[113, 1, 1]
[125]  RW sampler: S[114, 1, 1]
[126]  RW sampler: S[115, 1, 1]
[127]  RW sampler: S[116, 1, 1]
[128]  RW sampler: S[117, 1, 1]
[129]  RW sampler: S[118, 1, 1]
[130]  RW sampler: S[119, 1, 1]
[131]  RW sampler: S[120, 1, 1]
[132]  RW sampler: S[121, 1, 1]
[133]  RW sampler: S[122, 1, 1]
[134]  RW sampler: S[123, 1, 1]
[135]  RW sampler: S[124, 1, 1]
[136]  RW sampler: S[125, 1, 1]
[137]  RW sampler: S[126, 1, 1]
[138]  RW sampler: S[127, 1, 1]
[139]  RW sampler: S[128, 1, 1]
[140]  RW sampler: S[129, 1, 1]
[141]  RW sampler: S[130, 1, 1]
[142]  RW sampler: S[131, 1, 1]
[143]  RW sampler: S[132, 1, 1]
[144]  RW sampler: S[133, 1, 1]
[145]  RW sampler: S[134, 1, 1]
[146]  RW sampler: S[135, 1, 1]
[147]  RW sampler: S[136, 1, 1]
[148]  RW sampler: S[137, 1, 1]
[149]  RW sampler: S[138, 1, 1]
[150]  RW sampler: S[139, 1, 1]
[151]  RW sampler: S[140, 1, 1]
[152]  RW sampler: S[141, 1, 1]
[153]  RW sampler: S[142, 1, 1]
[154]  RW sampler: S[143, 1, 1]
[155]  RW sampler: S[144, 1, 1]
[156]  RW sampler: S[145, 1, 1]
[157]  RW sampler: S[146, 1, 1]
[158]  RW sampler: S[147, 1, 1]
[159]  RW sampler: S[148, 1, 1]
[160]  RW sampler: S[149, 1, 1]
[161]  RW sampler: S[150, 1, 1]
[162]  RW sampler: S[151, 1, 1]
[163]  RW sampler: S[152, 1, 1]
[164]  RW sampler: S[153, 1, 1]
[165]  RW sampler: S[154, 1, 1]
[166]  RW sampler: S[155, 1, 1]
[167]  RW sampler: S[156, 1, 1]
[168]  RW sampler: S[157, 1, 1]
[169]  RW sampler: S[158, 1, 1]
[170]  RW sampler: S[1, 2, 1]
[171]  RW sampler: S[2, 2, 1]
[172]  RW sampler: S[3, 2, 1]
[173]  RW sampler: S[4, 2, 4]
[174]  RW sampler: S[5, 2, 4]
[175]  RW sampler: S[6, 2, 4]
[176]  RW sampler: S[7, 2, 4]
[177]  RW sampler: S[8, 2, 4]
[178]  RW sampler: S[9, 2, 1]
[179]  RW sampler: S[10, 2, 3]
[180]  RW sampler: S[11, 2, 3]
[181]  RW sampler: S[12, 2, 3]
[182]  RW sampler: S[13, 2, 3]
[183]  RW sampler: S[14, 2, 3]
[184]  RW sampler: S[15, 2, 3]
[185]  RW sampler: S[16, 2, 3]
[186]  RW sampler: S[17, 2, 3]
[187]  RW sampler: S[18, 2, 3]
[188]  RW sampler: S[19, 2, 3]
[189]  RW sampler: S[20, 2, 3]
[190]  RW sampler: S[21, 2, 3]
[191]  RW sampler: S[22, 2, 3]
[192]  RW sampler: S[23, 2, 3]
[193]  RW sampler: S[24, 2, 3]
[194]  RW sampler: S[25, 2, 3]
[195]  RW sampler: S[26, 2, 3]
[196]  RW sampler: S[27, 2, 3]
[197]  RW sampler: S[28, 2, 3]
[198]  RW sampler: S[29, 2, 2]
[199]  RW sampler: S[30, 2, 2]
[200]  RW sampler: S[31, 2, 2]
[201]  RW sampler: S[32, 2, 2]
[202]  RW sampler: S[33, 2, 2]
[203]  RW sampler: S[34, 2, 2]
[204]  RW sampler: S[35, 2, 2]
[205]  RW sampler: S[36, 2, 2]
[206]  RW sampler: S[37, 2, 2]
[207]  RW sampler: S[38, 2, 2]
[208]  RW sampler: S[39, 2, 2]
[209]  RW sampler: S[40, 2, 2]
[210]  RW sampler: S[41, 2, 2]
[211]  RW sampler: S[42, 2, 2]
[212]  RW sampler: S[43, 2, 2]
[213]  RW sampler: S[44, 2, 2]
[214]  RW sampler: S[45, 2, 2]
[215]  RW sampler: S[46, 2, 2]
[216]  RW sampler: S[47, 2, 2]
[217]  RW sampler: S[48, 2, 2]
[218]  RW sampler: S[49, 2, 2]
[219]  RW sampler: S[50, 2, 2]
[220]  RW sampler: S[51, 2, 2]
[221]  RW sampler: S[52, 2, 2]
[222]  RW sampler: S[53, 2, 2]
[223]  RW sampler: S[54, 2, 2]
[224]  RW sampler: S[55, 2, 2]
[225]  RW sampler: S[56, 2, 2]
[226]  RW sampler: S[57, 2, 2]
[227]  RW sampler: S[58, 2, 2]
[228]  RW sampler: S[59, 2, 2]
[229]  RW sampler: S[60, 2, 2]
[230]  RW sampler: S[61, 2, 2]
[231]  RW sampler: S[62, 2, 2]
[232]  RW sampler: S[63, 2, 2]
[233]  RW sampler: S[64, 2, 2]
[234]  RW sampler: S[65, 2, 2]
[235]  RW sampler: S[66, 2, 2]
[236]  RW sampler: S[67, 2, 2]
[237]  RW sampler: S[68, 2, 2]
[238]  RW sampler: S[69, 2, 1]
[239]  RW sampler: S[70, 2, 1]
[240]  RW sampler: S[71, 2, 1]
[241]  RW sampler: S[72, 2, 1]
[242]  RW sampler: S[73, 2, 1]
[243]  RW sampler: S[74, 2, 1]
[244]  RW sampler: S[75, 2, 1]
[245]  RW sampler: S[76, 2, 1]
[246]  RW sampler: S[77, 2, 1]
[247]  RW sampler: S[78, 2, 1]
[248]  RW sampler: S[79, 2, 1]
[249]  RW sampler: S[80, 2, 1]
[250]  RW sampler: S[81, 2, 1]
[251]  RW sampler: S[82, 2, 1]
[252]  RW sampler: S[83, 2, 1]
[253]  RW sampler: S[84, 2, 1]
[254]  RW sampler: S[85, 2, 1]
[255]  RW sampler: S[86, 2, 1]
[256]  RW sampler: S[87, 2, 1]
[257]  RW sampler: S[88, 2, 1]
[258]  RW sampler: S[89, 2, 1]
[259]  RW sampler: S[90, 2, 1]
[260]  RW sampler: S[91, 2, 1]
[261]  RW sampler: S[92, 2, 1]
[262]  RW sampler: S[93, 2, 1]
[263]  RW sampler: S[94, 2, 1]
[264]  RW sampler: S[95, 2, 1]
[265]  RW sampler: S[96, 2, 1]
[266]  RW sampler: S[97, 2, 1]
[267]  RW sampler: S[98, 2, 1]
[268]  RW sampler: S[99, 2, 1]
[269]  RW sampler: S[100, 2, 1]
[270]  RW sampler: S[101, 2, 1]
[271]  RW sampler: S[102, 2, 1]
[272]  RW sampler: S[103, 2, 1]
[273]  RW sampler: S[104, 2, 1]
[274]  RW sampler: S[105, 2, 1]
[275]  RW sampler: S[106, 2, 1]
[276]  RW sampler: S[107, 2, 1]
[277]  RW sampler: S[108, 2, 1]
[278]  RW sampler: S[109, 2, 1]
[279]  RW sampler: S[110, 2, 1]
[280]  RW sampler: S[111, 2, 1]
[281]  RW sampler: S[112, 2, 1]
[282]  RW sampler: S[113, 2, 1]
[283]  RW sampler: S[114, 2, 1]
[284]  RW sampler: S[115, 2, 1]
[285]  RW sampler: S[116, 2, 1]
[286]  RW sampler: S[117, 2, 1]
[287]  RW sampler: S[118, 2, 1]
[288]  RW sampler: S[119, 2, 1]
[289]  RW sampler: S[120, 2, 1]
[290]  RW sampler: S[121, 2, 1]
[291]  RW sampler: S[122, 2, 1]
[292]  RW sampler: S[123, 2, 1]
[293]  RW sampler: S[124, 2, 1]
[294]  RW sampler: S[125, 2, 1]
[295]  RW sampler: S[126, 2, 1]
[296]  RW sampler: S[127, 2, 1]
[297]  RW sampler: S[128, 2, 1]
[298]  RW sampler: S[129, 2, 1]
[299]  RW sampler: S[130, 2, 1]
[300]  RW sampler: S[131, 2, 1]
[301]  RW sampler: S[132, 2, 1]
[302]  RW sampler: S[133, 2, 1]
[303]  RW sampler: S[134, 2, 1]
[304]  RW sampler: S[135, 2, 1]
[305]  RW sampler: S[136, 2, 1]
[306]  RW sampler: S[137, 2, 1]
[307]  RW sampler: S[138, 2, 1]
[308]  RW sampler: S[139, 2, 1]
[309]  RW sampler: S[140, 2, 1]
[310]  RW sampler: S[141, 2, 1]
[311]  RW sampler: S[142, 2, 1]
[312]  RW sampler: S[143, 2, 1]
[313]  RW sampler: S[144, 2, 1]
[314]  RW sampler: S[145, 2, 1]
[315]  RW sampler: S[146, 2, 1]
[316]  RW sampler: S[147, 2, 1]
[317]  RW sampler: S[148, 2, 1]
[318]  RW sampler: S[149, 2, 1]
[319]  RW sampler: S[150, 2, 1]
[320]  RW sampler: S[151, 2, 1]
[321]  RW sampler: S[152, 2, 1]
[322]  RW sampler: S[153, 2, 1]
[323]  RW sampler: S[154, 2, 1]
[324]  RW sampler: S[155, 2, 1]
[325]  RW sampler: S[156, 2, 1]
[326]  RW sampler: S[157, 2, 1]
[327]  RW sampler: S[158, 2, 1]
[328]  RW sampler: S[10, 1, 4]
[329]  RW sampler: S[10, 2, 4]
[330]  RW sampler: S[11, 1, 4]
[331]  RW sampler: S[11, 2, 4]
[332]  RW sampler: S[12, 1, 4]
[333]  RW sampler: S[12, 2, 4]
[334]  RW sampler: S[14, 1, 4]
[335]  RW sampler: S[14, 2, 4]
[336]  RW sampler: S[15, 1, 4]
[337]  RW sampler: S[15, 2, 4]
[338]  RW sampler: S[16, 1, 4]
[339]  RW sampler: S[16, 2, 4]
[340]  RW sampler: S[17, 1, 4]
[341]  RW sampler: S[17, 2, 4]
[342]  RW sampler: S[18, 1, 4]
[343]  RW sampler: S[18, 2, 4]
[344]  RW sampler: S[20, 1, 4]
[345]  RW sampler: S[20, 2, 4]
[346]  RW sampler: S[21, 1, 4]
[347]  RW sampler: S[21, 2, 4]
[348]  RW sampler: S[22, 1, 4]
[349]  RW sampler: S[22, 2, 4]
[350]  RW sampler: S[24, 1, 4]
[351]  RW sampler: S[24, 2, 4]
[352]  RW sampler: S[25, 1, 4]
[353]  RW sampler: S[25, 2, 4]
[354]  RW sampler: S[26, 1, 4]
[355]  RW sampler: S[26, 2, 4]
[356]  RW sampler: S[27, 1, 4]
[357]  RW sampler: S[27, 2, 4]
[358]  RW sampler: S[28, 1, 4]
[359]  RW sampler: S[28, 2, 4]
[360]  RW sampler: S[29, 1, 3]
[361]  RW sampler: S[29, 2, 3]
[362]  RW sampler: S[30, 1, 3]
[363]  RW sampler: S[30, 2, 3]
[364]  RW sampler: S[31, 1, 3]
[365]  RW sampler: S[31, 2, 3]
[366]  RW sampler: S[32, 1, 3]
[367]  RW sampler: S[32, 2, 3]
[368]  RW sampler: S[33, 1, 3]
[369]  RW sampler: S[33, 2, 3]
[370]  RW sampler: S[34, 1, 3]
[371]  RW sampler: S[34, 2, 3]
[372]  RW sampler: S[35, 1, 3]
[373]  RW sampler: S[35, 2, 3]
[374]  RW sampler: S[36, 1, 3]
[375]  RW sampler: S[36, 2, 3]
[376]  RW sampler: S[37, 1, 3]
[377]  RW sampler: S[37, 2, 3]
[378]  RW sampler: S[38, 1, 3]
[379]  RW sampler: S[38, 2, 3]
[380]  RW sampler: S[39, 1, 3]
[381]  RW sampler: S[39, 2, 3]
[382]  RW sampler: S[42, 1, 3]
[383]  RW sampler: S[42, 2, 3]
[384]  RW sampler: S[43, 1, 3]
[385]  RW sampler: S[43, 2, 3]
[386]  RW sampler: S[44, 1, 3]
[387]  RW sampler: S[44, 2, 3]
[388]  RW sampler: S[45, 1, 3]
[389]  RW sampler: S[45, 2, 3]
[390]  RW sampler: S[46, 1, 3]
[391]  RW sampler: S[46, 2, 3]
[392]  RW sampler: S[47, 1, 3]
[393]  RW sampler: S[47, 2, 3]
[394]  RW sampler: S[48, 1, 3]
[395]  RW sampler: S[48, 2, 3]
[396]  RW sampler: S[49, 1, 3]
[397]  RW sampler: S[49, 2, 3]
[398]  RW sampler: S[50, 1, 3]
[399]  RW sampler: S[50, 2, 3]
[400]  RW sampler: S[51, 1, 3]
[401]  RW sampler: S[51, 2, 3]
[402]  RW sampler: S[52, 1, 3]
[403]  RW sampler: S[52, 2, 3]
[404]  RW sampler: S[54, 1, 3]
[405]  RW sampler: S[54, 2, 3]
[406]  RW sampler: S[55, 1, 3]
[407]  RW sampler: S[55, 2, 3]
[408]  RW sampler: S[57, 1, 3]
[409]  RW sampler: S[57, 2, 3]
[410]  RW sampler: S[58, 1, 3]
[411]  RW sampler: S[58, 2, 3]
[412]  RW sampler: S[60, 1, 3]
[413]  RW sampler: S[60, 2, 3]
[414]  RW sampler: S[61, 1, 3]
[415]  RW sampler: S[61, 2, 3]
[416]  RW sampler: S[62, 1, 3]
[417]  RW sampler: S[62, 2, 3]
[418]  RW sampler: S[63, 1, 3]
[419]  RW sampler: S[63, 2, 3]
[420]  RW sampler: S[66, 1, 3]
[421]  RW sampler: S[66, 2, 3]
[422]  RW sampler: S[68, 1, 3]
[423]  RW sampler: S[68, 2, 3]
[424]  RW sampler: S[70, 1, 2]
[425]  RW sampler: S[70, 2, 2]
[426]  RW sampler: S[71, 1, 2]
[427]  RW sampler: S[71, 2, 2]
[428]  RW sampler: S[72, 1, 2]
[429]  RW sampler: S[72, 2, 2]
[430]  RW sampler: S[73, 1, 2]
[431]  RW sampler: S[73, 2, 2]
[432]  RW sampler: S[74, 1, 2]
[433]  RW sampler: S[74, 2, 2]
[434]  RW sampler: S[76, 1, 2]
[435]  RW sampler: S[76, 2, 2]
[436]  RW sampler: S[77, 1, 2]
[437]  RW sampler: S[77, 2, 2]
[438]  RW sampler: S[79, 1, 2]
[439]  RW sampler: S[79, 2, 2]
[440]  RW sampler: S[80, 1, 2]
[441]  RW sampler: S[80, 2, 2]
[442]  RW sampler: S[81, 1, 2]
[443]  RW sampler: S[81, 2, 2]
[444]  RW sampler: S[82, 1, 2]
[445]  RW sampler: S[82, 2, 2]
[446]  RW sampler: S[83, 1, 2]
[447]  RW sampler: S[83, 2, 2]
[448]  RW sampler: S[85, 1, 2]
[449]  RW sampler: S[85, 2, 2]
[450]  RW sampler: S[86, 1, 2]
[451]  RW sampler: S[86, 2, 2]
[452]  RW sampler: S[88, 1, 2]
[453]  RW sampler: S[88, 2, 2]
[454]  RW sampler: S[90, 1, 2]
[455]  RW sampler: S[90, 2, 2]
[456]  RW sampler: S[92, 1, 2]
[457]  RW sampler: S[92, 2, 2]
[458]  RW sampler: S[93, 1, 2]
[459]  RW sampler: S[93, 2, 2]
[460]  RW sampler: S[94, 1, 2]
[461]  RW sampler: S[94, 2, 2]
[462]  RW sampler: S[96, 1, 2]
[463]  RW sampler: S[96, 2, 2]
[464]  RW sampler: S[98, 1, 2]
[465]  RW sampler: S[98, 2, 2]
[466]  RW sampler: S[100, 1, 2]
[467]  RW sampler: S[100, 2, 2]
[468]  RW sampler: S[101, 1, 2]
[469]  RW sampler: S[101, 2, 2]
[470]  RW sampler: S[102, 1, 2]
[471]  RW sampler: S[102, 2, 2]
[472]  RW sampler: S[104, 1, 2]
[473]  RW sampler: S[104, 2, 2]
[474]  RW sampler: S[105, 1, 2]
[475]  RW sampler: S[105, 2, 2]
[476]  RW sampler: S[107, 1, 2]
[477]  RW sampler: S[107, 2, 2]
[478]  RW sampler: S[108, 1, 2]
[479]  RW sampler: S[108, 2, 2]
[480]  RW sampler: S[111, 1, 2]
[481]  RW sampler: S[111, 2, 2]
[482]  RW sampler: S[112, 1, 2]
[483]  RW sampler: S[112, 2, 2]
[484]  RW sampler: S[114, 1, 2]
[485]  RW sampler: S[114, 2, 2]
[486]  RW sampler: S[115, 1, 2]
[487]  RW sampler: S[115, 2, 2]
[488]  RW sampler: S[116, 1, 2]
[489]  RW sampler: S[116, 2, 2]
[490]  RW sampler: S[117, 1, 2]
[491]  RW sampler: S[117, 2, 2]
[492]  RW sampler: S[118, 1, 2]
[493]  RW sampler: S[118, 2, 2]
[494]  RW sampler: S[119, 1, 2]
[495]  RW sampler: S[119, 2, 2]
[496]  RW sampler: S[120, 1, 2]
[497]  RW sampler: S[120, 2, 2]
[498]  RW sampler: S[121, 1, 2]
[499]  RW sampler: S[121, 2, 2]
[500]  RW sampler: S[122, 1, 2]
[501]  RW sampler: S[122, 2, 2]
[502]  RW sampler: S[123, 1, 2]
[503]  RW sampler: S[123, 2, 2]
[504]  RW sampler: S[124, 1, 2]
[505]  RW sampler: S[124, 2, 2]
[506]  RW sampler: S[126, 1, 2]
[507]  RW sampler: S[126, 2, 2]
[508]  RW sampler: S[127, 1, 2]
[509]  RW sampler: S[127, 2, 2]
[510]  RW sampler: S[128, 1, 2]
[511]  RW sampler: S[128, 2, 2]
[512]  RW sampler: S[129, 1, 2]
[513]  RW sampler: S[129, 2, 2]
[514]  RW sampler: S[130, 1, 2]
[515]  RW sampler: S[130, 2, 2]
[516]  RW sampler: S[131, 1, 2]
[517]  RW sampler: S[131, 2, 2]
[518]  RW sampler: S[132, 1, 2]
[519]  RW sampler: S[132, 2, 2]
[520]  RW sampler: S[133, 1, 2]
[521]  RW sampler: S[133, 2, 2]
[522]  RW sampler: S[135, 1, 2]
[523]  RW sampler: S[135, 2, 2]
[524]  RW sampler: S[136, 1, 2]
[525]  RW sampler: S[136, 2, 2]
[526]  RW sampler: S[137, 1, 2]
[527]  RW sampler: S[137, 2, 2]
[528]  RW sampler: S[138, 1, 2]
[529]  RW sampler: S[138, 2, 2]
[530]  RW sampler: S[139, 1, 2]
[531]  RW sampler: S[139, 2, 2]
[532]  RW sampler: S[140, 1, 2]
[533]  RW sampler: S[140, 2, 2]
[534]  RW sampler: S[141, 1, 2]
[535]  RW sampler: S[141, 2, 2]
[536]  RW sampler: S[142, 1, 2]
[537]  RW sampler: S[142, 2, 2]
[538]  RW sampler: S[143, 1, 2]
[539]  RW sampler: S[143, 2, 2]
[540]  RW sampler: S[144, 1, 2]
[541]  RW sampler: S[144, 2, 2]
[542]  RW sampler: S[145, 1, 2]
[543]  RW sampler: S[145, 2, 2]
[544]  RW sampler: S[147, 1, 2]
[545]  RW sampler: S[147, 2, 2]
[546]  RW sampler: S[153, 1, 2]
[547]  RW sampler: S[153, 2, 2]
[548]  RW sampler: S[154, 1, 2]
[549]  RW sampler: S[154, 2, 2]
[550]  RW sampler: S[157, 1, 2]
[551]  RW sampler: S[157, 2, 2]
[552]  RW sampler: S[158, 1, 2]
[553]  RW sampler: S[158, 2, 2]
[554]  RW sampler: S[9, 1, 2]
[555]  RW sampler: S[9, 2, 2]
[556]  RW sampler: S[13, 1, 4]
[557]  RW sampler: S[13, 2, 4]
[558]  RW sampler: S[19, 1, 4]
[559]  RW sampler: S[19, 2, 4]
[560]  RW sampler: S[23, 1, 4]
[561]  RW sampler: S[23, 2, 4]
[562]  RW sampler: S[40, 1, 3]
[563]  RW sampler: S[40, 2, 3]
[564]  RW sampler: S[41, 1, 3]
[565]  RW sampler: S[41, 2, 3]
[566]  RW sampler: S[53, 1, 3]
[567]  RW sampler: S[53, 2, 3]
[568]  RW sampler: S[56, 1, 3]
[569]  RW sampler: S[56, 2, 3]
[570]  RW sampler: S[59, 1, 3]
[571]  RW sampler: S[59, 2, 3]
[572]  RW sampler: S[64, 1, 3]
[573]  RW sampler: S[64, 2, 3]
[574]  RW sampler: S[65, 1, 3]
[575]  RW sampler: S[65, 2, 3]
[576]  RW sampler: S[67, 1, 3]
[577]  RW sampler: S[67, 2, 3]
[578]  RW sampler: S[69, 1, 2]
[579]  RW sampler: S[69, 2, 2]
[580]  RW sampler: S[75, 1, 2]
[581]  RW sampler: S[75, 2, 2]
[582]  RW sampler: S[78, 1, 2]
[583]  RW sampler: S[78, 2, 2]
[584]  RW sampler: S[84, 1, 2]
[585]  RW sampler: S[84, 2, 2]
[586]  RW sampler: S[87, 1, 2]
[587]  RW sampler: S[87, 2, 2]
[588]  RW sampler: S[89, 1, 2]
[589]  RW sampler: S[89, 2, 2]
[590]  RW sampler: S[91, 1, 2]
[591]  RW sampler: S[91, 2, 2]
[592]  RW sampler: S[95, 1, 2]
[593]  RW sampler: S[95, 2, 2]
[594]  RW sampler: S[97, 1, 2]
[595]  RW sampler: S[97, 2, 2]
[596]  RW sampler: S[99, 1, 2]
[597]  RW sampler: S[99, 2, 2]
[598]  RW sampler: S[103, 1, 2]
[599]  RW sampler: S[103, 2, 2]
[600]  RW sampler: S[106, 1, 2]
[601]  RW sampler: S[106, 2, 2]
[602]  RW sampler: S[109, 1, 2]
[603]  RW sampler: S[109, 2, 2]
[604]  RW sampler: S[110, 1, 2]
[605]  RW sampler: S[110, 2, 2]
[606]  RW sampler: S[113, 1, 2]
[607]  RW sampler: S[113, 2, 2]
[608]  RW sampler: S[125, 1, 2]
[609]  RW sampler: S[125, 2, 2]
[610]  RW sampler: S[134, 1, 2]
[611]  RW sampler: S[134, 2, 2]
[612]  RW sampler: S[146, 1, 2]
[613]  RW sampler: S[146, 2, 2]
[614]  RW sampler: S[148, 1, 2]
[615]  RW sampler: S[148, 2, 2]
[616]  RW sampler: S[149, 1, 2]
[617]  RW sampler: S[149, 2, 2]
[618]  RW sampler: S[150, 1, 2]
[619]  RW sampler: S[150, 2, 2]
[620]  RW sampler: S[151, 1, 2]
[621]  RW sampler: S[151, 2, 2]
[622]  RW sampler: S[152, 1, 2]
[623]  RW sampler: S[152, 2, 2]
[624]  RW sampler: S[155, 1, 2]
[625]  RW sampler: S[155, 2, 2]
[626]  RW sampler: S[156, 1, 2]
[627]  RW sampler: S[156, 2, 2]
[628]  RW sampler: S[29, 1, 4]
[629]  RW sampler: S[29, 2, 4]
[630]  RW sampler: S[30, 1, 4]
[631]  RW sampler: S[30, 2, 4]
[632]  RW sampler: S[31, 1, 4]
[633]  RW sampler: S[31, 2, 4]
[634]  RW sampler: S[32, 1, 4]
[635]  RW sampler: S[32, 2, 4]
[636]  RW sampler: S[33, 1, 4]
[637]  RW sampler: S[33, 2, 4]
[638]  RW sampler: S[34, 1, 4]
[639]  RW sampler: S[34, 2, 4]
[640]  RW sampler: S[35, 1, 4]
[641]  RW sampler: S[35, 2, 4]
[642]  RW sampler: S[36, 1, 4]
[643]  RW sampler: S[36, 2, 4]
[644]  RW sampler: S[37, 1, 4]
[645]  RW sampler: S[37, 2, 4]
[646]  RW sampler: S[38, 1, 4]
[647]  RW sampler: S[38, 2, 4]
[648]  RW sampler: S[39, 1, 4]
[649]  RW sampler: S[39, 2, 4]
[650]  RW sampler: S[42, 1, 4]
[651]  RW sampler: S[42, 2, 4]
[652]  RW sampler: S[43, 1, 4]
[653]  RW sampler: S[43, 2, 4]
[654]  RW sampler: S[44, 1, 4]
[655]  RW sampler: S[44, 2, 4]
[656]  RW sampler: S[45, 1, 4]
[657]  RW sampler: S[45, 2, 4]
[658]  RW sampler: S[46, 1, 4]
[659]  RW sampler: S[46, 2, 4]
[660]  RW sampler: S[47, 1, 4]
[661]  RW sampler: S[47, 2, 4]
[662]  RW sampler: S[48, 1, 4]
[663]  RW sampler: S[48, 2, 4]
[664]  RW sampler: S[49, 1, 4]
[665]  RW sampler: S[49, 2, 4]
[666]  RW sampler: S[50, 1, 4]
[667]  RW sampler: S[50, 2, 4]
[668]  RW sampler: S[51, 1, 4]
[669]  RW sampler: S[51, 2, 4]
[670]  RW sampler: S[52, 1, 4]
[671]  RW sampler: S[52, 2, 4]
[672]  RW sampler: S[54, 1, 4]
[673]  RW sampler: S[54, 2, 4]
[674]  RW sampler: S[55, 1, 4]
[675]  RW sampler: S[55, 2, 4]
[676]  RW sampler: S[57, 1, 4]
[677]  RW sampler: S[57, 2, 4]
[678]  RW sampler: S[58, 1, 4]
[679]  RW sampler: S[58, 2, 4]
[680]  RW sampler: S[60, 1, 4]
[681]  RW sampler: S[60, 2, 4]
[682]  RW sampler: S[61, 1, 4]
[683]  RW sampler: S[61, 2, 4]
[684]  RW sampler: S[62, 1, 4]
[685]  RW sampler: S[62, 2, 4]
[686]  RW sampler: S[63, 1, 4]
[687]  RW sampler: S[63, 2, 4]
[688]  RW sampler: S[66, 1, 4]
[689]  RW sampler: S[66, 2, 4]
[690]  RW sampler: S[68, 1, 4]
[691]  RW sampler: S[68, 2, 4]
[692]  RW sampler: S[70, 1, 3]
[693]  RW sampler: S[70, 2, 3]
[694]  RW sampler: S[71, 1, 3]
[695]  RW sampler: S[71, 2, 3]
[696]  RW sampler: S[72, 1, 3]
[697]  RW sampler: S[72, 2, 3]
[698]  RW sampler: S[73, 1, 3]
[699]  RW sampler: S[73, 2, 3]
[700]  RW sampler: S[74, 1, 3]
[701]  RW sampler: S[74, 2, 3]
[702]  RW sampler: S[76, 1, 3]
[703]  RW sampler: S[76, 2, 3]
[704]  RW sampler: S[77, 1, 3]
[705]  RW sampler: S[77, 2, 3]
[706]  RW sampler: S[79, 1, 3]
[707]  RW sampler: S[79, 2, 3]
[708]  RW sampler: S[80, 1, 3]
[709]  RW sampler: S[80, 2, 3]
[710]  RW sampler: S[81, 1, 3]
[711]  RW sampler: S[81, 2, 3]
[712]  RW sampler: S[82, 1, 3]
[713]  RW sampler: S[82, 2, 3]
[714]  RW sampler: S[83, 1, 3]
[715]  RW sampler: S[83, 2, 3]
[716]  RW sampler: S[85, 1, 3]
[717]  RW sampler: S[85, 2, 3]
[718]  RW sampler: S[86, 1, 3]
[719]  RW sampler: S[86, 2, 3]
[720]  RW sampler: S[88, 1, 3]
[721]  RW sampler: S[88, 2, 3]
[722]  RW sampler: S[90, 1, 3]
[723]  RW sampler: S[90, 2, 3]
[724]  RW sampler: S[92, 1, 3]
[725]  RW sampler: S[92, 2, 3]
[726]  RW sampler: S[93, 1, 3]
[727]  RW sampler: S[93, 2, 3]
[728]  RW sampler: S[94, 1, 3]
[729]  RW sampler: S[94, 2, 3]
[730]  RW sampler: S[96, 1, 3]
[731]  RW sampler: S[96, 2, 3]
[732]  RW sampler: S[98, 1, 3]
[733]  RW sampler: S[98, 2, 3]
[734]  RW sampler: S[100, 1, 3]
[735]  RW sampler: S[100, 2, 3]
[736]  RW sampler: S[101, 1, 3]
[737]  RW sampler: S[101, 2, 3]
[738]  RW sampler: S[102, 1, 3]
[739]  RW sampler: S[102, 2, 3]
[740]  RW sampler: S[104, 1, 3]
[741]  RW sampler: S[104, 2, 3]
[742]  RW sampler: S[105, 1, 3]
[743]  RW sampler: S[105, 2, 3]
[744]  RW sampler: S[107, 1, 3]
[745]  RW sampler: S[107, 2, 3]
[746]  RW sampler: S[108, 1, 3]
[747]  RW sampler: S[108, 2, 3]
[748]  RW sampler: S[111, 1, 3]
[749]  RW sampler: S[111, 2, 3]
[750]  RW sampler: S[112, 1, 3]
[751]  RW sampler: S[112, 2, 3]
[752]  RW sampler: S[114, 1, 3]
[753]  RW sampler: S[114, 2, 3]
[754]  RW sampler: S[115, 1, 3]
[755]  RW sampler: S[115, 2, 3]
[756]  RW sampler: S[116, 1, 3]
[757]  RW sampler: S[116, 2, 3]
[758]  RW sampler: S[117, 1, 3]
[759]  RW sampler: S[117, 2, 3]
[760]  RW sampler: S[118, 1, 3]
[761]  RW sampler: S[118, 2, 3]
[762]  RW sampler: S[119, 1, 3]
[763]  RW sampler: S[119, 2, 3]
[764]  RW sampler: S[120, 1, 3]
[765]  RW sampler: S[120, 2, 3]
[766]  RW sampler: S[121, 1, 3]
[767]  RW sampler: S[121, 2, 3]
[768]  RW sampler: S[122, 1, 3]
[769]  RW sampler: S[122, 2, 3]
[770]  RW sampler: S[123, 1, 3]
[771]  RW sampler: S[123, 2, 3]
[772]  RW sampler: S[124, 1, 3]
[773]  RW sampler: S[124, 2, 3]
[774]  RW sampler: S[126, 1, 3]
[775]  RW sampler: S[126, 2, 3]
[776]  RW sampler: S[127, 1, 3]
[777]  RW sampler: S[127, 2, 3]
[778]  RW sampler: S[128, 1, 3]
[779]  RW sampler: S[128, 2, 3]
[780]  RW sampler: S[129, 1, 3]
[781]  RW sampler: S[129, 2, 3]
[782]  RW sampler: S[130, 1, 3]
[783]  RW sampler: S[130, 2, 3]
[784]  RW sampler: S[131, 1, 3]
[785]  RW sampler: S[131, 2, 3]
[786]  RW sampler: S[132, 1, 3]
[787]  RW sampler: S[132, 2, 3]
[788]  RW sampler: S[133, 1, 3]
[789]  RW sampler: S[133, 2, 3]
[790]  RW sampler: S[135, 1, 3]
[791]  RW sampler: S[135, 2, 3]
[792]  RW sampler: S[136, 1, 3]
[793]  RW sampler: S[136, 2, 3]
[794]  RW sampler: S[137, 1, 3]
[795]  RW sampler: S[137, 2, 3]
[796]  RW sampler: S[138, 1, 3]
[797]  RW sampler: S[138, 2, 3]
[798]  RW sampler: S[139, 1, 3]
[799]  RW sampler: S[139, 2, 3]
[800]  RW sampler: S[140, 1, 3]
[801]  RW sampler: S[140, 2, 3]
[802]  RW sampler: S[141, 1, 3]
[803]  RW sampler: S[141, 2, 3]
[804]  RW sampler: S[142, 1, 3]
[805]  RW sampler: S[142, 2, 3]
[806]  RW sampler: S[143, 1, 3]
[807]  RW sampler: S[143, 2, 3]
[808]  RW sampler: S[144, 1, 3]
[809]  RW sampler: S[144, 2, 3]
[810]  RW sampler: S[145, 1, 3]
[811]  RW sampler: S[145, 2, 3]
[812]  RW sampler: S[147, 1, 3]
[813]  RW sampler: S[147, 2, 3]
[814]  RW sampler: S[153, 1, 3]
[815]  RW sampler: S[153, 2, 3]
[816]  RW sampler: S[154, 1, 3]
[817]  RW sampler: S[154, 2, 3]
[818]  RW sampler: S[157, 1, 3]
[819]  RW sampler: S[157, 2, 3]
[820]  RW sampler: S[158, 1, 3]
[821]  RW sampler: S[158, 2, 3]
[822]  RW sampler: S[40, 1, 4]
[823]  RW sampler: S[40, 2, 4]
[824]  RW sampler: S[41, 1, 4]
[825]  RW sampler: S[41, 2, 4]
[826]  RW sampler: S[53, 1, 4]
[827]  RW sampler: S[53, 2, 4]
[828]  RW sampler: S[56, 1, 4]
[829]  RW sampler: S[56, 2, 4]
[830]  RW sampler: S[59, 1, 4]
[831]  RW sampler: S[59, 2, 4]
[832]  RW sampler: S[64, 1, 4]
[833]  RW sampler: S[64, 2, 4]
[834]  RW sampler: S[65, 1, 4]
[835]  RW sampler: S[65, 2, 4]
[836]  RW sampler: S[67, 1, 4]
[837]  RW sampler: S[67, 2, 4]
[838]  RW sampler: S[69, 1, 3]
[839]  RW sampler: S[69, 2, 3]
[840]  RW sampler: S[75, 1, 3]
[841]  RW sampler: S[75, 2, 3]
[842]  RW sampler: S[78, 1, 3]
[843]  RW sampler: S[78, 2, 3]
[844]  RW sampler: S[84, 1, 3]
[845]  RW sampler: S[84, 2, 3]
[846]  RW sampler: S[87, 1, 3]
[847]  RW sampler: S[87, 2, 3]
[848]  RW sampler: S[89, 1, 3]
[849]  RW sampler: S[89, 2, 3]
[850]  RW sampler: S[91, 1, 3]
[851]  RW sampler: S[91, 2, 3]
[852]  RW sampler: S[95, 1, 3]
[853]  RW sampler: S[95, 2, 3]
[854]  RW sampler: S[97, 1, 3]
[855]  RW sampler: S[97, 2, 3]
[856]  RW sampler: S[99, 1, 3]
[857]  RW sampler: S[99, 2, 3]
[858]  RW sampler: S[103, 1, 3]
[859]  RW sampler: S[103, 2, 3]
[860]  RW sampler: S[106, 1, 3]
[861]  RW sampler: S[106, 2, 3]
[862]  RW sampler: S[109, 1, 3]
[863]  RW sampler: S[109, 2, 3]
[864]  RW sampler: S[110, 1, 3]
[865]  RW sampler: S[110, 2, 3]
[866]  RW sampler: S[113, 1, 3]
[867]  RW sampler: S[113, 2, 3]
[868]  RW sampler: S[125, 1, 3]
[869]  RW sampler: S[125, 2, 3]
[870]  RW sampler: S[134, 1, 3]
[871]  RW sampler: S[134, 2, 3]
[872]  RW sampler: S[146, 1, 3]
[873]  RW sampler: S[146, 2, 3]
[874]  RW sampler: S[148, 1, 3]
[875]  RW sampler: S[148, 2, 3]
[876]  RW sampler: S[149, 1, 3]
[877]  RW sampler: S[149, 2, 3]
[878]  RW sampler: S[150, 1, 3]
[879]  RW sampler: S[150, 2, 3]
[880]  RW sampler: S[151, 1, 3]
[881]  RW sampler: S[151, 2, 3]
[882]  RW sampler: S[152, 1, 3]
[883]  RW sampler: S[152, 2, 3]
[884]  RW sampler: S[155, 1, 3]
[885]  RW sampler: S[155, 2, 3]
[886]  RW sampler: S[156, 1, 3]
[887]  RW sampler: S[156, 2, 3]
[888]  RW sampler: S[70, 1, 4]
[889]  RW sampler: S[70, 2, 4]
[890]  RW sampler: S[71, 1, 4]
[891]  RW sampler: S[71, 2, 4]
[892]  RW sampler: S[72, 1, 4]
[893]  RW sampler: S[72, 2, 4]
[894]  RW sampler: S[73, 1, 4]
[895]  RW sampler: S[73, 2, 4]
[896]  RW sampler: S[74, 1, 4]
[897]  RW sampler: S[74, 2, 4]
[898]  RW sampler: S[76, 1, 4]
[899]  RW sampler: S[76, 2, 4]
[900]  RW sampler: S[77, 1, 4]
[901]  RW sampler: S[77, 2, 4]
[902]  RW sampler: S[79, 1, 4]
[903]  RW sampler: S[79, 2, 4]
[904]  RW sampler: S[80, 1, 4]
[905]  RW sampler: S[80, 2, 4]
[906]  RW sampler: S[81, 1, 4]
[907]  RW sampler: S[81, 2, 4]
[908]  RW sampler: S[82, 1, 4]
[909]  RW sampler: S[82, 2, 4]
[910]  RW sampler: S[83, 1, 4]
[911]  RW sampler: S[83, 2, 4]
[912]  RW sampler: S[85, 1, 4]
[913]  RW sampler: S[85, 2, 4]
[914]  RW sampler: S[86, 1, 4]
[915]  RW sampler: S[86, 2, 4]
[916]  RW sampler: S[88, 1, 4]
[917]  RW sampler: S[88, 2, 4]
[918]  RW sampler: S[90, 1, 4]
[919]  RW sampler: S[90, 2, 4]
[920]  RW sampler: S[92, 1, 4]
[921]  RW sampler: S[92, 2, 4]
[922]  RW sampler: S[93, 1, 4]
[923]  RW sampler: S[93, 2, 4]
[924]  RW sampler: S[94, 1, 4]
[925]  RW sampler: S[94, 2, 4]
[926]  RW sampler: S[96, 1, 4]
[927]  RW sampler: S[96, 2, 4]
[928]  RW sampler: S[98, 1, 4]
[929]  RW sampler: S[98, 2, 4]
[930]  RW sampler: S[100, 1, 4]
[931]  RW sampler: S[100, 2, 4]
[932]  RW sampler: S[101, 1, 4]
[933]  RW sampler: S[101, 2, 4]
[934]  RW sampler: S[102, 1, 4]
[935]  RW sampler: S[102, 2, 4]
[936]  RW sampler: S[104, 1, 4]
[937]  RW sampler: S[104, 2, 4]
[938]  RW sampler: S[105, 1, 4]
[939]  RW sampler: S[105, 2, 4]
[940]  RW sampler: S[107, 1, 4]
[941]  RW sampler: S[107, 2, 4]
[942]  RW sampler: S[108, 1, 4]
[943]  RW sampler: S[108, 2, 4]
[944]  RW sampler: S[111, 1, 4]
[945]  RW sampler: S[111, 2, 4]
[946]  RW sampler: S[112, 1, 4]
[947]  RW sampler: S[112, 2, 4]
[948]  RW sampler: S[114, 1, 4]
[949]  RW sampler: S[114, 2, 4]
[950]  RW sampler: S[115, 1, 4]
[951]  RW sampler: S[115, 2, 4]
[952]  RW sampler: S[116, 1, 4]
[953]  RW sampler: S[116, 2, 4]
[954]  RW sampler: S[117, 1, 4]
[955]  RW sampler: S[117, 2, 4]
[956]  RW sampler: S[118, 1, 4]
[957]  RW sampler: S[118, 2, 4]
[958]  RW sampler: S[119, 1, 4]
[959]  RW sampler: S[119, 2, 4]
[960]  RW sampler: S[120, 1, 4]
[961]  RW sampler: S[120, 2, 4]
[962]  RW sampler: S[121, 1, 4]
[963]  RW sampler: S[121, 2, 4]
[964]  RW sampler: S[122, 1, 4]
[965]  RW sampler: S[122, 2, 4]
[966]  RW sampler: S[123, 1, 4]
[967]  RW sampler: S[123, 2, 4]
[968]  RW sampler: S[124, 1, 4]
[969]  RW sampler: S[124, 2, 4]
[970]  RW sampler: S[126, 1, 4]
[971]  RW sampler: S[126, 2, 4]
[972]  RW sampler: S[127, 1, 4]
[973]  RW sampler: S[127, 2, 4]
[974]  RW sampler: S[128, 1, 4]
[975]  RW sampler: S[128, 2, 4]
[976]  RW sampler: S[129, 1, 4]
[977]  RW sampler: S[129, 2, 4]
[978]  RW sampler: S[130, 1, 4]
[979]  RW sampler: S[130, 2, 4]
[980]  RW sampler: S[131, 1, 4]
[981]  RW sampler: S[131, 2, 4]
[982]  RW sampler: S[132, 1, 4]
[983]  RW sampler: S[132, 2, 4]
[984]  RW sampler: S[133, 1, 4]
[985]  RW sampler: S[133, 2, 4]
[986]  RW sampler: S[135, 1, 4]
[987]  RW sampler: S[135, 2, 4]
[988]  RW sampler: S[136, 1, 4]
[989]  RW sampler: S[136, 2, 4]
[990]  RW sampler: S[137, 1, 4]
[991]  RW sampler: S[137, 2, 4]
[992]  RW sampler: S[138, 1, 4]
[993]  RW sampler: S[138, 2, 4]
[994]  RW sampler: S[139, 1, 4]
[995]  RW sampler: S[139, 2, 4]
[996]  RW sampler: S[140, 1, 4]
[997]  RW sampler: S[140, 2, 4]
[998]  RW sampler: S[141, 1, 4]
[999]  RW sampler: S[141, 2, 4]
[1000] RW sampler: S[142, 1, 4]
[1001] RW sampler: S[142, 2, 4]
[1002] RW sampler: S[143, 1, 4]
[1003] RW sampler: S[143, 2, 4]
[1004] RW sampler: S[144, 1, 4]
[1005] RW sampler: S[144, 2, 4]
[1006] RW sampler: S[145, 1, 4]
[1007] RW sampler: S[145, 2, 4]
[1008] RW sampler: S[147, 1, 4]
[1009] RW sampler: S[147, 2, 4]
[1010] RW sampler: S[153, 1, 4]
[1011] RW sampler: S[153, 2, 4]
[1012] RW sampler: S[154, 1, 4]
[1013] RW sampler: S[154, 2, 4]
[1014] RW sampler: S[157, 1, 4]
[1015] RW sampler: S[157, 2, 4]
[1016] RW sampler: S[158, 1, 4]
[1017] RW sampler: S[158, 2, 4]
[1018] RW sampler: S[69, 1, 4]
[1019] RW sampler: S[69, 2, 4]
[1020] RW sampler: S[75, 1, 4]
[1021] RW sampler: S[75, 2, 4]
[1022] RW sampler: S[78, 1, 4]
[1023] RW sampler: S[78, 2, 4]
[1024] RW sampler: S[84, 1, 4]
[1025] RW sampler: S[84, 2, 4]
[1026] RW sampler: S[87, 1, 4]
[1027] RW sampler: S[87, 2, 4]
[1028] RW sampler: S[89, 1, 4]
[1029] RW sampler: S[89, 2, 4]
[1030] RW sampler: S[91, 1, 4]
[1031] RW sampler: S[91, 2, 4]
[1032] RW sampler: S[95, 1, 4]
[1033] RW sampler: S[95, 2, 4]
[1034] RW sampler: S[97, 1, 4]
[1035] RW sampler: S[97, 2, 4]
[1036] RW sampler: S[99, 1, 4]
[1037] RW sampler: S[99, 2, 4]
[1038] RW sampler: S[103, 1, 4]
[1039] RW sampler: S[103, 2, 4]
[1040] RW sampler: S[106, 1, 4]
[1041] RW sampler: S[106, 2, 4]
[1042] RW sampler: S[109, 1, 4]
[1043] RW sampler: S[109, 2, 4]
[1044] RW sampler: S[110, 1, 4]
[1045] RW sampler: S[110, 2, 4]
[1046] RW sampler: S[113, 1, 4]
[1047] RW sampler: S[113, 2, 4]
[1048] RW sampler: S[125, 1, 4]
[1049] RW sampler: S[125, 2, 4]
[1050] RW sampler: S[134, 1, 4]
[1051] RW sampler: S[134, 2, 4]
[1052] RW sampler: S[146, 1, 4]
[1053] RW sampler: S[146, 2, 4]
[1054] RW sampler: S[148, 1, 4]
[1055] RW sampler: S[148, 2, 4]
[1056] RW sampler: S[149, 1, 4]
[1057] RW sampler: S[149, 2, 4]
[1058] RW sampler: S[150, 1, 4]
[1059] RW sampler: S[150, 2, 4]
[1060] RW sampler: S[151, 1, 4]
[1061] RW sampler: S[151, 2, 4]
[1062] RW sampler: S[152, 1, 4]
[1063] RW sampler: S[152, 2, 4]
[1064] RW sampler: S[155, 1, 4]
[1065] RW sampler: S[155, 2, 4]
[1066] RW sampler: S[156, 1, 4]
[1067] RW sampler: S[156, 2, 4]
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
compiling... this may take a minute. Use 'showCompilerOutput = TRUE' to see C++ compiler details.
compilation finished.
warning: value of right hand side only node not initialized
|-------------|-------------|-------------|-------------|
|-------------------------------------------------------|
> out_dSCR3 <- rename_MCMC_comparison_method('nimble', 'SCR3', out_dSCR3)
> outList$SCR3 <- out_dSCR3
> save(outList, file = saveFile)
> message('finished SCR3')
finished SCR3
> 
> 
> 
> 
> 
> 
> 
> if(FALSE) {
+ 
+     ## making comparison pages for everything (in 'results_all.RData')
+     ## jags, nimble, dSCR1, dSCR2
+     setwd('~/github/scr_ergon/analysis')
+     ls()
+     load('results_all.RData')
+     ls()
+     library(nimble)
+     ## rename results
+     out_dSCR1[[1]] <- rename_MCMC_comparison_method('nimble', 'SCR1', out_dSCR1[[1]])
+     out_dSCR2[[1]] <- rename_MCMC_comparison_method('nimble', 'SCR2', out_dSCR2[[1]])
+     ## combine results
+     results <- combine_MCMC_comparison_results(out_jags[[1]], out_nimble[[1]], out_dSCR1[[1]], out_dSCR2[[1]])
+     ## make comparison pages
+     make_MCMC_comparison_pages(results, dir = 'pages', pageComponents = list(timing = TRUE, efficiencySummary = FALSE, efficiencySummaryAllParams = TRUE, paceSummaryAllParams = TRUE, efficiencyDetails = TRUE, posteriorSummary = TRUE))
+     system('open pages/MCMCresults.html')
+     save(out_jags, out_nimble, out_dSCR1, out_dSCR2, results, file = 'results_all.RData')
+ 
+ 
+     ## looking at "average" improvement in Efficieny between:
+     ## nimble vs. jags
+     ## dSCRx vs. nimble
+     setwd('~/github/scr_ergon/analysis')
+     load('results_all.RData')
+     unlist(out_nimble$nimble$efficiency)
+     unlist(out_jags$jags$efficiency)
+     unlist(out_dSCR1$SCR1$efficiency)
+     unlist(out_dSCR2$SCR2$efficiency)
+     unlist(out_nimble$nimble$efficiency) / unlist(out_jags$jags$efficiency)
+     ## min.nimble mean.nimble 
+     ## 4.175435    3.834809 
+     unlist(out_dSCR2$SCR2$efficiency) / unlist(out_nimble$nimble$efficiency)
+     ## min.SCR2 mean.SCR2 
+     ## 1.723233  2.311017
+ 
+ 
+     ## make comparisons pages from 'outList'
+     setwd('~/github/scr_ergon/analysis')
+     load('results_scr3.RData')
+     names(outList)
+     library(nimble)
+     ## combine results
+     results <- do.call(combine_MCMC_comparison_results, unname(outList))
+     ## make comparison pages
+     make_MCMC_comparison_pages(results, dir = 'pages_scr3', pageComponents = list(timing = TRUE, efficiencySummary = FALSE, efficiencySummaryAllParams = TRUE, paceSummaryAllParams = TRUE, efficiencyDetails = TRUE, posteriorSummary = TRUE), control = list(mainPageName = 'scr3'))
+     system('open pages_scr3/MCMCresults.html')
+ 
+     
+ 
+ 
+ }
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
    user   system  elapsed 
9558.380   14.716 9576.219 
